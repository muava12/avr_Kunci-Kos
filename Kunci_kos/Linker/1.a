;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 06/01/2014
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 12,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;int input[4], tekan, hasil, i, j;
;
;//------ PUSH BUTTON ------------------------
;#define ok PINC.0
;#define tombol_1 PINC.1
;#define tombol_2 PINC.2
;#define tombol_3 PINC.3
;
;//------ OPTOCOUPLE --------------------------
;#define opto1 PORTB.1
;#define opto2 PORTB.2
;#define buzzer PORTB.1
;#define ON 0
;#define OFF 1
;
;//------ LED KEDIP ---------------------------
;#define plus PORTC.5
;#define min PORTC.4
;
;//------ PSSWRD --------------------------------
;#define password 3312
;
;//------ AKSI BUKA KUNCI ---------------------
;void aksi() {
; 0000 0033 void aksi() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;
;//------ SUARA BAZZER ------------------------
;void buzzer_tekan() {
; 0000 0038 void buzzer_tekan() {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0039     buzzer = ON ;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003A     min = 0 ; plus = 1 ;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003B     delay_ms(200);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003C     buzzer = OFF ;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003D     min = 0 ; plus = 0 ;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003E     delay_ms(100);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003F }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void buzzer_benar() {
; 0000 0041 void buzzer_benar() {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0042     buzzer = ON ; min = 0 ; plus = 1 ; delay_ms(100);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0043     buzzer = OFF ; min = 0 ; plus = 0 ; delay_ms(100);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0044     buzzer = ON ; min = 0 ; plus = 1 ; delay_ms(100);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045     buzzer = OFF ; min = 0 ; plus = 0 ; delay_ms(100);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0046 }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;
;void buzzer_salah() {
; 0000 0048 void buzzer_salah() {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0049     buzzer = ON ; min = 0 ; plus = 1 ; delay_ms(300);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004A     buzzer = OFF ;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004B     min = 0 ; plus = 0 ;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004C }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;void buzzer_maling() {
; 0000 004E void buzzer_maling() {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004F     for (i=0; i<3; i++) {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0050     buzzer = ON ; min = 0 ; plus = 1 ; delay_ms(600);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0051     buzzer = OFF ; min = 0 ; plus = 0 ; delay_ms(400);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0052     }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0053 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;void main(void)
; 0000 0056 {
;PCODE: $00000087 VOL: 0
; 0000 0057 // Declare your local variables here
; 0000 0058 
; 0000 0059 // Input/Output Ports initialization
; 0000 005A // Port B initialization
; 0000 005B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 005C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 005D PORTB=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 005E DDRB=0xFF;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005F 
; 0000 0060 // Port C initialization
; 0000 0061 // Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0062 // State6=0 State5=0 State4=0 State3=P State2=P State1=P State0=P
; 0000 0063 PORTC=0x0F;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0064 DDRC=0x70;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0065 
; 0000 0066 // Port D initialization
; 0000 0067 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0068 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0069 PORTD=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006A DDRD=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006B 
; 0000 006C // Timer/Counter 0 initialization
; 0000 006D // Clock source: System Clock
; 0000 006E // Clock value: Timer 0 Stopped
; 0000 006F TCCR0=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0070 TCNT0=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0071 
; 0000 0072 // Timer/Counter 1 initialization
; 0000 0073 // Clock source: System Clock
; 0000 0074 // Clock value: Timer1 Stopped
; 0000 0075 // Mode: Normal top=0xFFFF
; 0000 0076 // OC1A output: Discon.
; 0000 0077 // OC1B output: Discon.
; 0000 0078 // Noise Canceler: Off
; 0000 0079 // Input Capture on Falling Edge
; 0000 007A // Timer1 Overflow Interrupt: Off
; 0000 007B // Input Capture Interrupt: Off
; 0000 007C // Compare A Match Interrupt: Off
; 0000 007D // Compare B Match Interrupt: Off
; 0000 007E TCCR1A=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 007F TCCR1B=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0080 TCNT1H=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0081 TCNT1L=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0082 ICR1H=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0083 ICR1L=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0084 OCR1AH=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0085 OCR1AL=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0086 OCR1BH=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0087 OCR1BL=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0088 
; 0000 0089 // Timer/Counter 2 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: Timer2 Stopped
; 0000 008C // Mode: Normal top=0xFF
; 0000 008D // OC2 output: Disconnected
; 0000 008E ASSR=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008F TCCR2=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0090 TCNT2=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0091 OCR2=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0092 
; 0000 0093 // External Interrupt(s) initialization
; 0000 0094 // INT0: Off
; 0000 0095 // INT1: Off
; 0000 0096 MCUCR=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0097 
; 0000 0098 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0099 TIMSK=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 009A 
; 0000 009B // USART initialization
; 0000 009C // USART disabled
; 0000 009D UCSRB=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 009E 
; 0000 009F // Analog Comparator initialization
; 0000 00A0 // Analog Comparator: Off
; 0000 00A1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A2 ACSR=0x80;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A3 SFIOR=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00A4 
; 0000 00A5 // ADC initialization
; 0000 00A6 // ADC disabled
; 0000 00A7 ADCSRA=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A8 
; 0000 00A9 // SPI initialization
; 0000 00AA // SPI disabled
; 0000 00AB SPCR=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00AC 
; 0000 00AD // TWI initialization
; 0000 00AE // TWI disabled
; 0000 00AF TWCR=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B0 
; 0000 00B1 
; 0000 00B2 while (1)
;PCODE: $000000C4 VOL: 0
; 0000 00B3       {
; 0000 00B4 
; 0000 00B5       awal:
;PCODE: $000000C5 VOL: 0
; 0000 00B6       PORTC.4 = 0; PORTC.5 = 0; PORTB.1 = 1; PORTB.2 = 1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00B7         if (ok == 0) {
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B8             hasil = input[0]*1000 + input[1]*100 + input[2]*10 + input[3]*1 ;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B9           if (hasil == password) {
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00BA                 while(1) {
;PCODE: $000000E8 VOL: 0
; 0000 00BB                     buzzer_benar();
;PCODE: $000000E9 VOL: 0
; 0000 00BC                     //delay_ms(500);
; 0000 00BD 
; 0000 00BE                 //RESET NILAI KE AWAL
; 0000 00BF                     i = 0;
;PCODE: $000000EA VOL: 0
; 0000 00C0                     hasil = 0;
;PCODE: $000000EB VOL: 0
; 0000 00C1                     for (j=0; j<= 4; j++) {
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00C2                     input[j] = 0 ;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C3                     }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00C4                 //AKSI
; 0000 00C5                     while(1) {
;PCODE: $00000101 VOL: 0
; 0000 00C6                      plus = 1; min = 0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C7                      for(j=0; j<5; j++) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C8                         delay_ms(200);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00C9                         if (ok == 0) goto awal;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00CA                         }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CB                     plus = 0; min = 0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00CC                       for(j=0; j<2; j++) {
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00CD                          delay_ms(200);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00CE                         if (ok == 0) goto awal;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CF                         }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00D0                     }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D1                 //KEMBALI KE AWAL PROGRAM
; 0000 00D2                     goto awal;
;PCODE: $0000013A VOL: 0
; 0000 00D3                 };
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00D4            }
; 0000 00D5           else
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D6           {
; 0000 00D7                     buzzer_salah();
;PCODE: $0000013F VOL: 0
; 0000 00D8                     delay_ms(200);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00D9                     i= 0;
;PCODE: $00000143 VOL: 0
; 0000 00DA                     goto awal;
;PCODE: $00000144 VOL: 0
; 0000 00DB           }
;PCODE: $00000145 VOL: 0
; 0000 00DC         }
; 0000 00DD 
; 0000 00DE         else if (tombol_1 == 0) {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00DF             tekan = 1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00E0             input[i] = tekan;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00E1             i = i+1;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E2             plus = 1;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00E3             buzzer_tekan();
;PCODE: $00000157 VOL: 0
; 0000 00E4             goto awal;
;PCODE: $00000158 VOL: 0
; 0000 00E5         }
; 0000 00E6         else if (tombol_2 == 0) {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00E7             tekan = 2;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00E8             input[i] = tekan;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E9             i = i+1;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00EA             plus = 1;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00EB             buzzer_tekan();
;PCODE: $00000169 VOL: 0
; 0000 00EC             goto awal;
;PCODE: $0000016A VOL: 0
; 0000 00ED         }
; 0000 00EE         else if (tombol_3 == 0) {
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00EF             tekan = 3;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00F0             input[i] = tekan;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F1             i = i+1;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F2             plus = 1;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00F3             buzzer_tekan();
;PCODE: $0000017B VOL: 0
; 0000 00F4             goto awal;
;PCODE: $0000017C VOL: 0
; 0000 00F5         }
; 0000 00F6       }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00F7 
; 0000 00F8 }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
